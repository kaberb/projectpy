from tkinter import *
from math import *
from tkinter.font import Font


n = 3
exemple_graphe_1 = [[0 for j in range(n)] for i in range(n)] 
exemple_graphe_1[0][1] = 1; exemple_graphe_1[1][0] = 1
exemple_graphe_1[0][2] = 1; exemple_graphe_1[2][0] = 1

n = 4

exemple_graphe_2 = [[0 for j in range(n)] for i in range(n)] 

exemple_graphe_2[0][2] = 1; exemple_graphe_2[2][0] = 1 
exemple_graphe_2[0][3] = 1; exemple_graphe_2[3][0] = 1
exemple_graphe_2[1][2] = 1; exemple_graphe_2[2][1] = 1

n = 5

exemple_graphe_3 = [[0 for j in range(n)] for i in range(n)] 

exemple_graphe_3[0][2] = 1; exemple_graphe_3[2][0] = 1 
exemple_graphe_3[0][3] = 1; exemple_graphe_3[3][0] = 1
exemple_graphe_3[1][2] = 1; exemple_graphe_3[2][1] = 1
exemple_graphe_3[1][4] = 1; exemple_graphe_3[4][1] = 1
exemple_graphe_3[3][4] = 1; exemple_graphe_3[4][3] = 1 

n = 6

exemple_graphe_4 = [[0 for j in range(n)] for i in range(n)] 

exemple_graphe_4[3][2] = 1; exemple_graphe_4[2][3] = 1; 
exemple_graphe_4[1][2] = 1; exemple_graphe_4[2][1] = 1
exemple_graphe_4[3][4] = 1; exemple_graphe_4[4][3] = 1
exemple_graphe_4[4][1] = 1; exemple_graphe_4[1][4] = 1
exemple_graphe_4[0][2] = 1; exemple_graphe_4[2][0] = 1
exemple_graphe_4[5][0] = 1; exemple_graphe_4[0][5] = 1
exemple_graphe_4[5][1] = 1; exemple_graphe_4[1][5] = 1
exemple_graphe_4[0][3] = 1; exemple_graphe_4[3][0] = 1

n = 4

exemple_graphe_cours_1 = [[0 for j in range(n)] for i in range(n)] 

exemple_graphe_cours_1[0][2] = 1; exemple_graphe_cours_1[2][0] = 1 
exemple_graphe_cours_1[1][3] = 1; exemple_graphe_cours_1[3][1] = 1

def voir_graphe(graphe):
    """
    Affiche un graphe à l'écran
    Entrée : un graphe comme tableau à deux dimension
    Sortie : rien (affichage à l'écran)
    """    
    
    n = len(graphe)

    for j in range(n):
        for i in range(n):
            print(graphe[i][j], end="")
        print()

    return
if __name__ == '__main__':
    print("--- Matrice du graphe ---")
    print("--- Exemple 1 ---")
    voir_graphe(exemple_graphe_1)
    print("--- Exemple 2 ---")
    voir_graphe(exemple_graphe_2)
    print("--- Exemple 3 ---")
    voir_graphe(exemple_graphe_3)
    print("--- Exemple 4 ---")
    voir_graphe(exemple_graphe_4)

    print("--- Cours 1 ---")
    voir_graphe(exemple_graphe_cours_1)    

def contient_3_amis_fixes(graphe,i,j,k):
    """Cherche si sommets i, j, k sont tous reliés entre eux comme amis"""
    if graphe[i][j] == 1 and graphe[i][k] == 1 and graphe[j][k] == 1:
        return True
    else:
        return False
def contient_3_etrangers_fixes(graphe,i,j,k):
    """Cherche si sommets i, j, k sont tous reliés entre eux comme étrangers"""
    if graphe[i][j] == 0 and graphe[i][k] == 0 and graphe[j][k] == 0:
        return True
    else:
        return False        

# Test
if __name__ == '__main__':
    print("--- Sous-graphe fixé de 0 et de 1 ---")
    print(contient_3_amis_fixes(exemple_graphe_4 ,1,3,4))
    print(contient_3_etrangers_fixes(exemple_graphe_4 ,1,3,4))
# Fenêtre tkinter
root = Tk()

canvas = Canvas(root, width=800, height=500, background="white")
canvas.pack(side=LEFT, padx=5, pady=5)

# rayon 
rayon = 200
##################################################
# Un graphe 

## Question 1 ##

# Version basique (recalcule plein de fois la même chose)
##################################################
def afficher_graphe_basic(graphe):
    """
    Affiche un graphe à l'écran
    Entrée : un graphe
    Sortie : rien (affichage à l'écran)
    """    
    n = len(graphe)
    
      # Arêtes
    for j in range(n):
        for i in range(n):
            xi = 2*rayon + cos(2*i*pi/n)*echelle
            yi = 1.5*rayon + sin(2*i*pi/n)*echelle
            xj = 2*rayon + cos(2*j*pi/n)*echelle
            yj = 1.5*rayon + sin(2*j*pi/n)*echelle        
            if graphe[i][j] == 0:
                canvas.create_line(xi,yi,xj,yj,width=4,fill="red") 
            if graphe[i][j] == 1:
                canvas.create_line(xi,yi,xj,yj,width=4,fill="green") 

    # Sommets                 
    for i in range(n):
        x = 2*rayon + cos(2*i*pi/n)*echelle
        y = rayon + sin(2*i*pi/n)*echelle
        canvas.create_oval(x-5,y-5,x+5,y+5,fill="black")

    return

# Version optimale 
##################################################
def afficher_graphe(graphe):
    """
    Affiche un graphe à l'écran
    Entrée : un graphe
    Sortie : rien (affichage à l'écran)
    """    
    n = len(graphe)  # Nombre de sommets

    # Liste des coordonnées (x,y) des sommets
    coord = [(2*echelle + cos(2*i*pi/n)*rayon,1.2*rayon + sin(2*i*pi/n)*rayon) for i in range(n)]

    # Arêtes
    for j in range(n):
        for i in range(j+1,n):  # i>j
            if graphe[i][j] == 0:
                canvas.create_line(coord[i],coord[j],width=4,fill="red",dash=(6, 2)) 
            if graphe[i][j] == 1:
                canvas.create_line(coord[i],coord[j],width=4,fill="green")

    mafonte = Font(family="Courier", weight="bold",size=18)
     # Sommets                  
    for i in range(n):
        x,y = coord[i]
        canvas.create_oval(x-15,y-15,x+15,y+15,fill="black")
        canvas.create_text(x,y,text=str(i),font=mafonte,fill="white")

    # Numéro


    return
# Lancement de la fenêtre 
if __name__ == '__main__':
    bouton_quitter = Button(root,text="Quitter", width=8, command=root.quit)
    bouton_quitter.pack(side=BOTTOM, padx=5, pady=20)

    # Test d'un exemple
    afficher_graphe(exemple_graphe_2)
    root.mainloop()

##############################
# Activité 3 - Binaire
##############################

## Echanger n <-> p pour être cohérent avec fiche binaire

def decimal_vers_binaire(p,n):
    chaine_b = bin(p)  # Conversion en une chaîne écriture binaire
    chaine_bb = chaine_b[2:]  # On enlève le préfixe
    # On transforme la chaine en une liste **d'entiers** 0 ou 1
    liste_binaire = []
    for b in chaine_bb:
        liste_binaire = liste_binaire + [int(b)]

    # On rajoute des zéros au début si besoin
    nb_zeros = n - len(liste_binaire)
    for i in range(nb_zeros):
        liste_binaire = [0] + liste_binaire

    return liste_binaire


# Version plus courte qui utilise "format()"
def decimal_vers_binaire_bis(p,n):
    modele = '{:0'+str(n)+'b}'
    chaine_binaire = modele.format(p)
    liste_binaire = [int(b) for b in list(chaine_binaire)]
    return liste_binaire


# Test 
if __name__ == '__main__':
    n = 8
    p = 37
    print(decimal_vers_binaire(p,n))
    print(decimal_vers_binaire_bis(p,n))
##############################
# Activité 3 - Binaire
##############################

## Echanger n <-> p pour être cohérent avec fiche binaire

def decimal_vers_binaire(p,n):
    chaine_b = bin(p)  # Conversion en une chaîne écriture binaire
    chaine_bb = chaine_b[2:]  # On enlève le préfixe
    # On transforme la chaine en une liste **d'entiers** 0 ou 1
    liste_binaire = []
    for b in chaine_bb:
        liste_binaire = liste_binaire + [int(b)]

    # On rajoute des zéros au début si besoin
    nb_zeros = n - len(liste_binaire)
    for i in range(nb_zeros):
        liste_binaire = [0] + liste_binaire

    return liste_binaire


# Version plus courte qui utilise "format()"
def decimal_vers_binaire_bis(p,n):
    modele = '{:0'+str(n)+'b}'
    chaine_binaire = modele.format(p)
    liste_binaire = [int(b) for b in list(chaine_binaire)]
    return liste_binaire


# Test 
if __name__ == '__main__':
    n = 8
    p = 37
    print(decimal_vers_binaire(p,n))
    print(decimal_vers_binaire_bis(p,n))

##############################
# Activité 4 - Sous-ensembles
##############################

## Question 1 ##


# Génère tous les sous-ensembles

##################################################
def sous_ensembles(n):
    """Trouve tous les sous-ensembles de l'ensemble à n éléments [0,1,2,...n-1]"""

    tous_sous_ens = []

    for p in range(2**n):

        # Conversion binaire
        liste_binaire = decimal_vers_binaire(p,n)
        #print(liste_binaire)

        sous_ens = []
        for j in range(n):
            # if liste_binaire[n-j-1] == 1:  
            if liste_binaire[j] == 1:                
                sous_ens = sous_ens + [j]

        tous_sous_ens = tous_sous_ens + [sous_ens]

    return tous_sous_ens
# Test 
if __name__ == '__main__':
    print("--- Sous-ensembles ---")
    n = 3
    SS_ENS = sous_ensembles(n) 
    print("Pour n = ",n)
    print("Nombre de sous-ensembles = ",len(SS_ENS))
    print(SS_ENS)
## Question 2 ##

##################################################
def sous_ensembles_fixe(n,k):
    tous_sous_ens_fixe = []
    for sous_ens in sous_ensembles(n):
        if len(sous_ens) == k:
            tous_sous_ens_fixe = tous_sous_ens_fixe + [sous_ens]
    return tous_sous_ens_fixe

# Test (suite)
if __name__ == '__main__':
    print("--- Sous-ensembles à 3 éléments ---")

    n = 6
    k = 3
    SS_ENS_3 = sous_ensembles_fixe(n,k)
    print("Pour n = ",n," k = ",k)
    print("Nombre de sous-ensembles à 3 éléments = ",len(SS_ENS_3))
    print(SS_ENS_3)

